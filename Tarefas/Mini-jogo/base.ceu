/*********
		TOC
        
		[a_t_enum]  Arrow types enum
		[C_win]	    Create SDL_Window
		[C_ren]     Create SDL_Renderer
		[C_tex]    Load SDL_Texture 
		
        [Cl_format] Formatter class
		[Cl_arrow]  Arrow class
        [Cl_buttons] Buttons class
		[G_beg]     GAME?
		
**********/

#include "c.ceu"
#include "sdl.ceu"

native @nohold _SDL_SetTextureColorMod,_SDL_RenderCopyEx(); // para poder usar essa funcao

#define ARROW_WIDTH 64//296
#define ARROW_HEIGHT 64//214
#define ARROW_PADD 16
#define ARROW_NUMB 9
#define BUTTON_WIDTH 75//296
#define BUTTON_HEIGHT 75//214
#define BUTTON_OFFSET 100
#define BUTTON_PADD 20
#define SCREEN_WIDTH 480
#define SCREEN_HEIGHT 640
#define BASE_SPEED 0.1

input int  SDL_DT;
input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent* SDL_KEYDOWN;


/******** [a_t_enum] Arrow types enum ********/
native do
    typedef enum a_type {
        right,
        down,
        left,
        up
    } DDR_type;
    int ORGS = 0;
    float gameSpeed=BASE_SPEED;
end
/******** [C_win] Create SDL_Window (Destroy on finalization) ********/

var _SDL_Window* window;
    finalize
        window = _SDL_CreateWindow("reativosDDR ceu",
				_SDL_WINDOWPOS_CENTERED,
				_SDL_WINDOWPOS_CENTERED,
				SCREEN_WIDTH, SCREEN_HEIGHT,_SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(window);
    end

/******** [C_ren] Create SDL_Renderer (Destroy on finalization) ********/
native do
    SDL_Renderer* renderer=NULL;
end
    finalize
        _renderer = _SDL_CreateRenderer(window, -1, _SDL_RENDERER_ACCELERATED | _SDL_RENDERER_PRESENTVSYNC);
    with
        _SDL_DestroyRenderer(_renderer);
    end

/******** [C_tex] Load SDL_Texture  (Destroy on finalization) ********/

native do
    SDL_Texture* tex_arrow, *tex_button;
end

    finalize
        _tex_arrow = _IMG_LoadTexture(_renderer, "arrow.png");
    with
        _SDL_DestroyTexture(_tex_arrow);
    end
    _assert(_tex_arrow != null);

    finalize
        _tex_button = _IMG_LoadTexture(_renderer, "arrowbut.png");
    with
        _SDL_DestroyTexture(_tex_button);
    end
    _assert(_tex_button != null);

/******** [Cl_format] Formatter class ********/
class Formatter with
    var int type;
    var int angle;
    var int x;
    var int r;
    var int g;
    var int b;
    var int obj_width;
	event void ok;
do
    r=255;g=255;b=255;
    if type==_up then //red
        angle=270;
        x=(SCREEN_WIDTH/5)*3-obj_width/2;
        g=0;
        b=0;
    else/if type==_down then //green
        angle=90;
        x=(SCREEN_WIDTH/5)*2-obj_width/2;
        r=0;
        b=0;
    else/if type==_right then //blue
        angle=0;
        x=(SCREEN_WIDTH/5)*4-obj_width/2;
        r=0;
        g=0;
    else/if type==_left then //yellow
        angle=180;
        x=(SCREEN_WIDTH/5)*1-obj_width/2;
        b=0;
    end

end

/******** [Cl_arrow] Arrow class ********/

class Arrow with
	var float y;
	var int type;
    var bool visible=true;
	//_DDR_type type;
    //event void    ok;   // signalled when the object leaves the screen
do
    var _SDL_Rect renderQuad;
    renderQuad.w=ARROW_WIDTH;
    renderQuad.h=ARROW_HEIGHT;

    /*** count arrows ***/
    _ORGS = _ORGS + 1;          // increment on init
        finalize with
            _ORGS = _ORGS - 1;  // decrement on finalization
        end;
    /*** format arrow ***/
    var Formatter f with
            this.type=type;
            this.obj_width=ARROW_WIDTH;
    end;
    renderQuad.x=f.x;

    par/or do       //update position
        var int dt;
        every dt in SDL_DT do
            y=y+_gameSpeed*dt;
            renderQuad.y=y;
            if y>SCREEN_HEIGHT then
                break;
            end
        end
    with            //redraw
        every SDL_REDRAW do
            if visible==true then 
                _SDL_SetTextureColorMod(_tex_arrow,f.r,f.g,f.b);
                _SDL_RenderCopyEx(_renderer,_tex_arrow, null ,&renderQuad,f.angle, null ,_SDL_FLIP_NONE);
            end
        end
    end
end

/******** [Cl_buttons] Buttons class ********/

class Button with
    var int type;
do
    var _SDL_Rect renderQuad;
    renderQuad.w=BUTTON_WIDTH;
    renderQuad.h=BUTTON_HEIGHT;
    renderQuad.y=SCREEN_HEIGHT-BUTTON_OFFSET;
    
    var Formatter f with
            this.type=type;
            this.obj_width=BUTTON_WIDTH;
    end;
    renderQuad.x=f.x;
    
    every SDL_REDRAW do
        _SDL_SetTextureColorMod(_tex_button,f.r,f.g,f.b);
        _SDL_RenderCopyEx(_renderer,_tex_button, null ,&renderQuad,f.angle, null ,_SDL_FLIP_NONE);
    end
end

/******** [G_beg] GAME? ********/

par/or do
    await SDL_QUIT;		//terminates everything
with
    /* set background color */
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_renderer,255,255,255,255);
        _SDL_RenderClear(_renderer);
    end
with
    loop do
        par/or do //restart game on 'r'
            /* Main game loop */
            _gameSpeed=BASE_SPEED;
            var int i=0;
            event int key_press;
            pool Arrow[] arrows;
            var Button[4] buttons with //create buttons
                this.type=i;
                i=i+1;
            end;
            par/or do //spawn arrows
                
                every (SCREEN_HEIGHT/(_gameSpeed*6))ms do
                    spawn Arrow in arrows with
                        this.y=-ARROW_HEIGHT;
                        this.type=_rand()%4;
                    end;
                end
            with  //watch keys
                var _SDL_KeyboardEvent* key;
                
                every key in SDL_KEYDOWN do
                    var int type_k=-1;
                    if key:keysym.sym==_SDLK_UP then
                        type_k=_up;
                    else/if key:keysym.sym==_SDLK_DOWN then
                        type_k=_down;
                    else/if key:keysym.sym==_SDLK_LEFT then
                        type_k=_left;
                    else/if key:keysym.sym==_SDLK_RIGHT then
                        type_k=_right;
                    end
                    emit key_press => type_k;
                end
            with  //react to keys
                var int key;
                every key in key_press do
                    if key >=0 and key <=3 then
                        loop (Arrow*)a in arrows do
                            if a:type==key and a:visible==true then
                                if a:y>SCREEN_HEIGHT-BUTTON_OFFSET-BUTTON_PADD and 
                                a:y+ARROW_HEIGHT<SCREEN_HEIGHT-BUTTON_OFFSET+BUTTON_HEIGHT+BUTTON_PADD
                                then
                                    a:visible=false;
                                    _gameSpeed=_gameSpeed+0.003;
                                end
                            end
                        end
                    end
                end
            end
        with
            var _SDL_KeyboardEvent* key;
            key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_r;
        end
    end
with
    /* update screen */
    every SDL_REDRAW do
        _SDL_RenderPresent(_renderer);
    end
with
    /* calculate FPS */
    loop do
        var int c = 0;
        par/or do
            every SDL_REDRAW do
                c = c + 1;
            end
        with
            await 1s;
        end
        _printf("[FPS=%d] [orgs=%d]\n", c, _ORGS);
	//_printf("[FPS=%d] [orgs=?]\n", c);
    end
end

escape 0;
