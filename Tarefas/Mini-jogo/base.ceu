/*********
		TOC
        
		[a_t_enum]  Arrow types enum
		[C_win]	    Create SDL_Window
		[C_ren]     Create SDL_Renderer
		[C_tex]    Load SDL_Texture 
		
		[Cl_arrow]  Arrow class
		[G_beg]     GAME?
		
**********/

#include "c.ceu"
#include "sdl.ceu"

native @nohold _SDL_RenderCopyEx();

#define ARROW_WIDTH 64//296
#define ARROW_HEIGHT 64//214
#define ARROW_PADD 16
#define ARROW_NUMB 9
#define BUTTON_WIDTH 75//296
#define BUTTON_HEIGHT 75//214
#define BUTTON_OFFSET 100
#define BUTTON_PADD 20
#define SCREEN_WIDTH 480
#define SCREEN_HEIGHT 640

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

/******** [a_t_enum] Arrow types enum ********/
native do
    typedef enum a_type {
        right,
        down,
        left,
        up
    } DDR_type;
end
/******** [C_win] Create SDL_Window (Destroy on finalization) ********/

var _SDL_Window* window;
    finalize
        window = _SDL_CreateWindow("reativosDDR ceu",
				_SDL_WINDOWPOS_CENTERED,
				_SDL_WINDOWPOS_CENTERED,
				SCREEN_WIDTH, SCREEN_HEIGHT,_SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(window);
    end

/******** [C_ren] Create SDL_Renderer (Destroy on finalization) ********/
native do
    SDL_Renderer* renderer=NULL;
end
    finalize
        _renderer = _SDL_CreateRenderer(window, -1, _SDL_RENDERER_ACCELERATED | _SDL_RENDERER_PRESENTVSYNC);
    with
        _SDL_DestroyRenderer(_renderer);
    end

/******** [C_tex] Load SDL_Texture  (Destroy on finalization) ********/

native do
    SDL_Texture* tex_arrow, *tex_button;
end

    finalize
        _tex_arrow = _IMG_LoadTexture(_renderer, "arrow.png");
    with
        _SDL_DestroyTexture(_tex_arrow);
    end
    _assert(_tex_arrow != null);

    finalize
        _tex_button = _IMG_LoadTexture(_renderer, "arrowbut.png");
    with
        _SDL_DestroyTexture(_tex_button);
    end
    _assert(_tex_button != null);

/******** [Cl_arrow] Arrow class ********/

class Arrow with
	var float y;
	//_DDR_type type;
    //event void    ok;   // signalled when the object leaves the screen
do
    var _SDL_Rect renderQuad;
    renderQuad.x=0;
    renderQuad.w=ARROW_WIDTH;
    renderQuad.h=ARROW_HEIGHT;
    
    par/or do
        every SDL_REDRAW do

            _SDL_RenderCopyEx(_renderer,_tex_arrow,null,&renderQuad,0/*angle*/,null,_SDL_FLIP_NONE);



            //_SDL_RenderCopy(_renderer,_tex_arrow,null,&renderQuad);
        end
    with
        await 5s;
    end
    
end

/******** [G_beg] GAME? ********/

par/or do
    await SDL_QUIT;		//terminates everything
with
    /* set background color */
    every SDL_REDRAW do
    _SDL_SetRenderDrawColor(_renderer,255,255,255,255);
    _SDL_RenderClear(_renderer);
    end
with
    spawn Arrow with
        this.y=100;
        //this.type=2;
    end;
	await 10s;

with
    /* update screen */
    every SDL_REDRAW do
        _SDL_RenderPresent(_renderer);
    end
with
    /* calculate FPS */
    loop do
        var int c = 0;
        par/or do
            every SDL_REDRAW do
                c = c + 1;
            end
        with
            await 1s;
        end
        //_printf("[FPS=%d] [orgs=%d]\n", c, _ORGS);
	_printf("[FPS=%d] [orgs=?]\n", c);
    end
end

escape 0;
